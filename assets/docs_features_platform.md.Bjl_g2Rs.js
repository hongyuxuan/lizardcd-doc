import{_ as t,D as i,c as r,j as a,a as e,I as s,a1 as c,o as l}from"./chunks/framework.BReWa4D7.js";const y=JSON.parse('{"title":"平台设置","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/platform.md","filePath":"docs/features/platform.md","lastUpdated":1720319383000}'),d={name:"docs/features/platform.md"},n={id:"平台设置",tabindex:"-1"},h=a("a",{class:"header-anchor",href:"#平台设置","aria-label":'Permalink to "平台设置 <Badge type="warning" text="v1.0.0" />"'},"​",-1),p=c(`<p>本章节介绍Lizardcd的平台设置，部分设置仅有 <code>admin</code> 权限的用户可以使用。</p><h2 id="设置" tabindex="-1">设置 <a class="header-anchor" href="#设置" aria-label="Permalink to &quot;设置&quot;">​</a></h2><h3 id="开启对接istio" tabindex="-1">开启对接Istio <a class="header-anchor" href="#开启对接istio" aria-label="Permalink to &quot;开启对接Istio&quot;">​</a></h3><p><a href="https://istio.io/" target="_blank" rel="noreferrer">Istio</a> 是一个云原生的服务网格解决方案，提供微服务调用、流量治理、网关、服务跟踪监控等组件功能。</p><p>Lizardcd 通过 <a href="https://pkg.go.dev/istio.io/client-go/pkg/apis/networking/v1beta1" target="_blank" rel="noreferrer">Istio client-go SDK</a> 对接 <code>Istio</code>，该功能要求 agent 所纳管的 Kubernetes 集群已安装好 <code>Istio</code>，具备 <code>istio.io</code> Group 下的相关 apiVersion，同时 agent 启动时使用的 <code>serviceaccount</code> 或 <code>kubeconfig</code> 必须具备对 <code>istio.io</code> Group 下资源的相关操作权限。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如何查看集群是否已经安装 <code>Istio</code>，可执行如下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># kubectl api-versions | grep istio</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extensions.istio.io/v1alpha1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networking.istio.io/v1alpha3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">networking.istio.io/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">security.istio.io/v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">security.istio.io/v1beta1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">telemetry.istio.io/v1alpha1</span></span></code></pre></div><p>如能显示 *.istio.io 即表示已安装</p></div><p>对接 <code>Istio</code> 功能默认是关闭的，管理员可在设置页面开启对接 <code>Istio</code>。当启用后，左边导航栏将会出现 <code>Istio管理</code> 菜单，详细使用方法参见 <a href="/lizardcd/docs/features/istio.html">Istio管理</a></p><h3 id="开启对接tekton" tabindex="-1">开启对接Tekton <a class="header-anchor" href="#开启对接tekton" aria-label="Permalink to &quot;开启对接Tekton&quot;">​</a></h3><p><a href="https://tekton.dev/" target="_blank" rel="noreferrer">Tekton</a> 是一个云原生的持续集成项目。Lizardcd 预留了对接 <code>Tekton</code> 的功能，预计在v1.4.0版本上线。</p><h3 id="开启helm包管理" tabindex="-1">开启Helm包管理 <a class="header-anchor" href="#开启helm包管理" aria-label="Permalink to &quot;开启Helm包管理&quot;">​</a></h3><p><a href="https://helm.sh/zh/docs/" target="_blank" rel="noreferrer">Helm</a> 是一个 Kubernetes 的包管理器，类似于 CentOS 的 <code>yum</code> 或 Ubuntu 的 <code>apt</code>。Helm 源码由 <code>Helm pkg</code> 和 <code>Helm cli</code> 两部分构成，参考：<a href="https://github.com/helm/helm" target="_blank" rel="noreferrer">https://github.com/helm/helm</a>。<code>pkg</code> 是 Helm 的核心功能，<code>cli</code> 调用 <code>pkg</code> 实现了命令行工具。</p><p>Lizardcd 通过调用 <code>Helm pkg</code> 重写了 <code>Helm cli</code>，将全部 <code>Helm cli</code> 的功能集成入 <code>lizardcd-ui</code> 和 <code>lizardcd-cli</code>。</p><p><code>Helm包管理</code> 功能默认是关闭的，管理员可在设置页面开启 <code>Helm包管理</code>。当启用后，左边导航栏将会出现 <code>Helm管理</code> 菜单，详细使用方法参见 <a href="/lizardcd/docs/features/helm.html">Helm管理</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>设置对不同租户是独立的，亦即某租户开启了一项设置，和其它租户无关，只有同属一个租户的用户共享相同的设置。</p></div><h2 id="租户管理" tabindex="-1">租户管理 <a class="header-anchor" href="#租户管理" aria-label="Permalink to &quot;租户管理&quot;">​</a></h2><p>详见 <a href="/lizardcd/docs/features/rbac.html">用户与权限管理</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>该设置仅 <code>admin</code> 角色可见</p></div><h2 id="用户管理" tabindex="-1">用户管理 <a class="header-anchor" href="#用户管理" aria-label="Permalink to &quot;用户管理&quot;">​</a></h2><p>详见 <a href="/lizardcd/docs/features/rbac.html">用户与权限管理</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>该设置仅 <code>admin</code> 角色可见</p></div><h2 id="镜像仓库管理" tabindex="-1">镜像仓库管理 <a class="header-anchor" href="#镜像仓库管理" aria-label="Permalink to &quot;镜像仓库管理&quot;">​</a></h2><p>镜像仓库是应用发布时用来选择镜像tag（或者实体机部署时选择安装包）的，需要提前在本页面设置好。目前Lizardcd共支持四种类型的镜像仓库：</p><h3 id="artifactory" tabindex="-1">Artifactory <a class="header-anchor" href="#artifactory" aria-label="Permalink to &quot;Artifactory&quot;">​</a></h3><p>杰蛙公司的产品 <a href="https://jfrog.com/" target="_blank" rel="noreferrer">Jfrog Artifactory</a>，经测试，目前仅支持企业版（因只有企业版才提供API接口）。创建该类型仓库时填写的内容：</p><ul><li>仓库地址：Artifactory 的域名地址，以 http 或 https 开头，不要带任何路径</li><li>仓库账号，登录 Artifactory 的用户名</li><li>仓库密码：该登录账户的 <code>API Key</code></li></ul><h3 id="harbor" tabindex="-1">Harbor <a class="header-anchor" href="#harbor" aria-label="Permalink to &quot;Harbor&quot;">​</a></h3><p><a href="https://goharbor.io/" target="_blank" rel="noreferrer">Harbor</a> 是一个 Docker 镜像仓库管理平台。创建该类型仓库时填写的内容：</p><ul><li>仓库地址：Harbor 的域名地址，以 http 或 https 开头，不要带任何路径</li><li>仓库账号，登录 Harbor 的用户名</li><li>仓库密码：登录 Harbor 的密码</li></ul><h3 id="dockerhub" tabindex="-1">DockerHub <a class="header-anchor" href="#dockerhub" aria-label="Permalink to &quot;DockerHub&quot;">​</a></h3><p>Docker 官方镜像仓库。创建该类型仓库时填写的内容：</p><ul><li>仓库地址：固定地址：<a href="https://hub.docker.com" target="_blank" rel="noreferrer">https://hub.docker.com</a></li><li>仓库账号，登录 Docker 的用户名</li><li>仓库密码：Personal Access Tokens，关于如何获取详见 <a href="https://docs.docker.com/security/for-developers/access-tokens/" target="_blank" rel="noreferrer">Create and manage access tokens</a></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>自 2024.6 月起国内网络无法直接拉取 DockerHub 的镜像，可能需要一些特殊手段</p></div><h3 id="s3" tabindex="-1">S3 <a class="header-anchor" href="#s3" aria-label="Permalink to &quot;S3&quot;">​</a></h3><p>兼容S3协议的对象存储，如 <code>Minio</code>、<code>腾讯云COS</code>、<code>阿里云OSS</code> 等。对于实体机部署，可将应用制品（安装包）存放于对象存储，Lizardcd支持从对象存储下载制品。创建该类型仓库时填写的内容：</p><ul><li>仓库地址：对象存储地址，以 http 或 https 开头</li><li>仓库账号，对象存储的 <code>AccessKey</code></li><li>仓库密码：对象存储的 <code>SecretKey</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>镜像仓库管理对不同租户是独立的，亦即某租户添加的仓库，其它租户将看不见，只有同属一个租户的用户能够看见。</p></div>`,36);function k(u,m,b,f,g,_){const o=i("Badge");return l(),r("div",null,[a("h1",n,[e("平台设置 "),s(o,{type:"warning",text:"v1.0.0"}),e(),h]),p])}const P=t(d,[["render",k]]);export{y as __pageData,P as default};
