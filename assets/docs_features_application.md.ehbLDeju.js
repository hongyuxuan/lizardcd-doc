import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.BReWa4D7.js";const g=JSON.parse('{"title":"应用管理","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/application.md","filePath":"docs/features/application.md","lastUpdated":1720319383000}'),t={name:"docs/features/application.md"},p=e(`<h1 id="应用管理" tabindex="-1">应用管理 <a class="header-anchor" href="#应用管理" aria-label="Permalink to &quot;应用管理&quot;">​</a></h1><p>应用部署是 Lizardcd 的核心功能，本章节讲述如何创建/编辑三种部署方式的应用、每种部署方式的应用场景；发布应用，查看应用的执行结果；发布失败后的处理方式等。</p><h2 id="容器部署" tabindex="-1">容器部署 <a class="header-anchor" href="#容器部署" aria-label="Permalink to &quot;容器部署&quot;">​</a></h2><p>Lizardcd 的原生部署方式。支持 Kubernetes <code>deployment</code> 和 <code>statefulset</code> 两种工作负载。</p><p>与 ArgoCD 的 GitOps 模式不同，ArgoCD 需要在 Git 上维护一份工作负载的 YAML 配置，并且通过 Git 的 <code>Webhook</code> 触发应用部署。</p><p>Lizardcd 是直接调用 <code>client-go</code> 中工作负载的 <code>Patch</code> 接口，参考如下 <code>DeploymentInterface</code> 接口定义：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeploymentInterface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pt</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opts</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> metav1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subresources</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">v1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Deployment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中 <code>PatchType</code> 有如下几种类型：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	JSONPatchType           </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;application/json-patch+json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	MergePatchType          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;application/merge-patch+json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	StrategicMergePatchType </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;application/strategic-merge-patch+json&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	ApplyPatchType          </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PatchType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;application/apply-patch+yaml&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Lizardcd 使用的是其中的 <code>StrategicMergePatchType</code>。关于更多 <code>PatchType</code> 的用法说明详见 <a href="https://kubernetes.io/docs/tasks/manage-kubernetes-objects/update-api-object-kubectl-patch/" target="_blank" rel="noreferrer">Update API Objects in Place Using kubectl patch</a>。</p><p>关于 Lizardcd 容器部署的使用方法详见 <a href="/lizardcd/docs/features/application/k8s.html">容器部署</a></p><h2 id="虚拟机-物理机部署" tabindex="-1">虚拟机/物理机部署 <a class="header-anchor" href="#虚拟机-物理机部署" aria-label="Permalink to &quot;虚拟机/物理机部署&quot;">​</a></h2><p>Lizardcd 的扩展部署模式。Lizardcd 设计之初是没有虚拟机/物理机部署方式的，但在公司内部的使用过程中，有越来越多的用户提出了这个需求。本着用户就是上帝的原则，Lizardcd 采纳了这个提议。</p><p>实体机的应用部署本质上是远程自动化任务执行，在这一领域，目前使用最多的方案是 <code>Ansible</code>，以及其图形化平台 <code>Ansible Tower</code>（企业版） 或 <code>AWX</code>（Tower 的开源版）。其它的诸如 <code>SaltStack</code> 和 <code>Puppet</code> 等已经没什么人用了。除此之外还有一些云厂商提供的平台，比如腾讯的 <code>蓝鲸PAAS平台</code>。</p><p>无论那种产品，其实现方式上无外乎 <code>有 agent</code> 版和 <code>无 agent</code> 版。<code>Ansible</code> 是 <code>无 agent</code> 版，而 Lizardcd 采用的是 <code>有 agent</code> 版。Lizardcd 的 agent 除了能够纳管 Kubernetes 之外，还能部署于实体机上做任务执行，其本质是通过 <code>exec.Command</code> 系统调用执行 <code>shell</code> 脚本。</p><p>关于 Lizardcd 容器部署的使用方法详见 <a href="/lizardcd/docs/features/application/vm.html">虚拟机部署</a></p><h2 id="http部署" tabindex="-1">HTTP部署 <a class="header-anchor" href="#http部署" aria-label="Permalink to &quot;HTTP部署&quot;">​</a></h2><p>Lizardcd 的增强部署模式。对于大多数第三方部署平台（这里的第三方是相对于 Lizardcd 来说），例如 <code>ArgoCD</code>、<code>Ansible Tower/AWX</code>、<code>Apache Dolphinscheduler</code>等，只要提供了 HTTP 接口，Lizardcd 支持通过简单配置的方式，将应用部署请求转发到这些第三方平台，并通过配置的 <code>健康检查</code> 接口从第三方平台获取部署状态和部署结果。</p><p>HTTP 部署模式是 Lizardcd 的终极部署方法，理论上可以对接一切提供接口的第三方平台。对于企业内部已现存多种部署平台，想要集中管理；或者某些应用无法用 Lizardcd 直接部署的用户来说，是一个非常好的选择。</p><p>关于 Lizardcd HTTP部署的使用方法详见 <a href="/lizardcd/docs/features/application/http.html">HTTP部署</a></p>`,20),h=[p];function n(l,d,k,c,r,o){return a(),i("div",null,h)}const y=s(t,[["render",n]]);export{g as __pageData,y as default};
