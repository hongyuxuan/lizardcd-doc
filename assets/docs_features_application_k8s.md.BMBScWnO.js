import{_ as t,D as d,c,j as a,a as e,I as i,a3 as l,o as r,a4 as s}from"./chunks/framework.wZF1ThbV.js";const v=JSON.parse('{"title":"容器部署","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/application/k8s.md","filePath":"docs/features/application/k8s.md","lastUpdated":1720356898000}'),n={name:"docs/features/application/k8s.md"},p={id:"容器部署",tabindex:"-1"},h=a("a",{class:"header-anchor",href:"#容器部署","aria-label":'Permalink to "容器部署 <Badge type="warning" text="v1.2.1" />"'},"​",-1),m=l('<p>本章节展示如何创建一个容器部署方式的应用</p><h2 id="新建应用" tabindex="-1">新建应用 <a class="header-anchor" href="#新建应用" aria-label="Permalink to &quot;新建应用&quot;">​</a></h2><p>导航栏点击 <code>应用管理</code>，点击按钮 <code>新建应用</code>，按如下图所示填写：</p><p><img src="'+s+'" alt="" data-fancybox="gallery"></p><p><b>基础配置</b></p><ul><li>应用名称：任意名称</li><li>部署方式：容器</li><li>镜像仓库/制品库：选择一个 <a href="/lizardcd-doc/docs/features/platform.html#镜像仓库管理">镜像仓库管理</a> 章节添加的仓库</li><li>仓库/项目：Artifactory 填写仓库名；Harbor 填写项目名；DockerHub 填写 namespace；S3 填写桶（bucket）名</li><li>镜像名/制品路径：剩余的镜像路径。Lizardcd 会将上述三个字段拼成实际的镜像 URL 并从选择的镜像仓库中获取</li><li>设置标签：可以为应用设置标签，标签 key 支持重复</li></ul><p><b>容器部署配置</b></p><ul><li>开启灰度发布：参考 <a href="/lizardcd-doc/docs/features/platform.html#开启对接istio">开启对接Istio</a> 章节设置，开启对接 Istio；如不需要，保持关闭</li><li>工作负载：点击 <code>+</code> 添加一个工作负载 <ul><li>容器集群：agent 注册时设置的 Key 会标识其所纳管的集群名称，参考 <a href="/lizardcd-doc/docs/deploy/configure/agent.html">agent配置</a>。选择一个集群。</li><li>命名空间：agent 注册时设置的 Key 会标识其所纳管的命名空间，参考 <a href="/lizardcd-doc/docs/deploy/configure/agent.html">agent配置</a>。选择一个命名空间。</li><li>工作负载类型：按需选择。</li><li>工作负载名称：<code>deployment</code> 或 <code>statefulset</code> 的 <code>metadata.name</code>。</li><li>容器名称：<code>spec.template.spec.containers[*].name</code>。</li><li>是否启用：如不需要部署此工作负载则关闭。此功能的用处在于用户临时不想部署某个工作负载时，可以将其禁用。</li></ul></li></ul><p>提交保存即可。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一个应用可以添加多个工作负载，每个工作负载可以属于不同集群/命名空间。由此可见，Lizardcd 支持将应用的同一个版本发布到不同的集群/命名空间，这对于多数据中心、异地灾备的应用部署将非常有用。</p></div><h2 id="灰度发布" tabindex="-1">灰度发布 <a class="header-anchor" href="#灰度发布" aria-label="Permalink to &quot;灰度发布&quot;">​</a></h2><p>Lizardcd 支持对接 <code>Istio</code>，借助 <code>Istio</code> 的流量管理功能实现灰度发布。</p><h3 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h3><ul><li>需要使用灰度发布的集群必须已经安装好 <code>Istio</code></li><li>Lizardcd 的设置中开启 <code>Istio</code> 管理，详见 <a href="/lizardcd-doc/docs/features/platform.html#开启对接istio">开启对接 Istio</a></li></ul><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>Istio 的灰度发布参考 <a href="https://istio.io/latest/zh/docs/tasks/traffic-management/request-routing/" target="_blank" rel="noreferrer">配置请求路由</a>，基本步骤如下：</p><ol><li>创建两个版本的 <code>deployment</code>，并分别打上标签 <code>version: v1</code> 和 <code>version: v2</code>。</li><li>创建一个service，将请求转发到第 1 步创建的两个 <code>deployment</code>。</li><li>创建<code>目标规则</code>，将两个 <code>deployment</code> 分成两个 <code>subset</code>。</li><li>创建<code>虚拟服务</code>，将流量根据 <code>基于HTTP头部字段</code> 或 <code>基于权重</code> 路由到两个 <code>deployment</code>。</li></ol><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><p>本例将创建一个 <code>flaskapp</code> 以说明如何通过 Lizardcd 实现灰度发布。</p>',19);function u(f,_,b,k,g,y){const o=d("Badge");return r(),c("div",null,[a("h1",p,[e("容器部署 "),i(o,{type:"warning",text:"v1.2.1"}),e(),h]),m])}const I=t(n,[["render",u]]);export{v as __pageData,I as default};
