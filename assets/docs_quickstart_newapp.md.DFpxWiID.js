import{_ as a,c as e,o,a3 as c,ad as t,ae as d,af as r,ag as l,ah as s,ai as p,aj as i}from"./chunks/framework.CchC5uhv.js";const q=JSON.parse('{"title":"新建应用","description":"","frontmatter":{},"headers":[],"relativePath":"docs/quickstart/newapp.md","filePath":"docs/quickstart/newapp.md","lastUpdated":1720431440000}'),n={name:"docs/quickstart/newapp.md"},_=c('<h1 id="新建应用" tabindex="-1">新建应用 <a class="header-anchor" href="#新建应用" aria-label="Permalink to &quot;新建应用&quot;">​</a></h1><p>本章节将快速建立一个简单的demo应用，并对该应用做发布、重启等操作。</p><h2 id="新建工作负载" tabindex="-1">新建工作负载 <a class="header-anchor" href="#新建工作负载" aria-label="Permalink to &quot;新建工作负载&quot;">​</a></h2><p>Lizardcd默认提供了简易的 <code>deployment</code> YAML 模板，点击页面的 <code>YAML模板</code> 菜单，该模板遵循 <code>go-template</code> 模板语法，如图所示：</p><p><img src="'+t+'" alt="" data-fancybox="gallery"></p><p>可以打开内置好的模板 <code>application_template_base</code>，点击编辑按钮：</p><p><img src="'+d+'" alt="" data-fancybox="gallery"></p><p>通常情况下不需要修改这个模板，关闭此页面。如有定制需求，可编辑该模板，或者新建您自己的模板。</p><p>点击 <code>工作负载</code>-<code>部署</code> 导航，选择集群 <code>k8s</code>、命名空间 <code>default</code>，点击新建工作负载，从模板导入选择 <code>application_template_base</code>，该模板默认会部署一个 <code>nginx</code> 镜像，Appname 为 <code>lizardtest</code>，点击提交。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>您可能无法访问DockerHub，请将 <code>Image</code> 修改为能访问的镜像</p></div><h2 id="查看工作负载" tabindex="-1">查看工作负载 <a class="header-anchor" href="#查看工作负载" aria-label="Permalink to &quot;查看工作负载&quot;">​</a></h2><p>等待一会，在当前页面看是否 <code>lizardtest</code> 工作负载已经就绪：</p><p><img src="'+r+'" alt="" data-fancybox="gallery"></p><p>如果工作负载未就绪，可点击 <code>lizardtest</code> 进入工作负载详情页面查看：</p><p><img src="'+l+'" alt="" data-fancybox="gallery"></p><h2 id="添加镜像仓库" tabindex="-1">添加镜像仓库 <a class="header-anchor" href="#添加镜像仓库" aria-label="Permalink to &quot;添加镜像仓库&quot;">​</a></h2><p>点击页面右上角配置，并切换到 <code>镜像仓库管理</code>，点击按钮 <code>新建仓库</code>，Lizardcd 支持四种类型仓库：</p><ul><li>Jfrog Artifactory</li><li>Harbor</li><li>DockerHub（现在可能已经无法使用了）</li><li>S3</li></ul><p>假设选择DockerHub，填入仓库账号和密码（DockerHub请填写Personal Access Tokens），保存即可。</p><h2 id="新建应用-1" tabindex="-1">新建应用 <a class="header-anchor" href="#新建应用-1" aria-label="Permalink to &quot;新建应用&quot;">​</a></h2><p>确保工作负载已经就绪后，点击 <code>应用管理</code> 导航，点击 <code>新建应用</code> 按钮，新增一个应用：</p><p><img src="'+s+'" alt="" data-fancybox="gallery"></p><p>其中，部署方式选择 <code>容器</code>，镜像仓库选择上一步新建的 <code>DockerHub</code> 仓库，其余按照页面提示填写即可。在工作负载处点击<code>+</code>按钮新增一个负载。如果前序步骤部署正确，在容器集群和命名空间应该能出现 agent 所在的 Kubernetes 集群和命名空间。工作负载名称填写 <code>deployment</code> 的名称 <code>lizardtest</code>，容器名称填写 <code>spec.template.spec.container.name</code>，提交保存即可。</p><p><img src="'+p+'" alt="" data-fancybox="gallery"></p><h2 id="发布版本" tabindex="-1">发布版本 <a class="header-anchor" href="#发布版本" aria-label="Permalink to &quot;发布版本&quot;">​</a></h2><p>在当前页面，找到 <code>lizardtest</code> 应用，更多操作按钮选择 <code>发布</code>，发布策略保持选择 <code>所有工作负载使用相同镜像</code>。如果前面配置镜像仓库没有问题，选择制品这里会列出来所有的镜像 tags，选择一个tag。工作负载可以选择 <code>是否启用</code>，这里保持启用，点击提交。</p><p><img src="'+i+'" alt="" data-fancybox="gallery"></p><p>之后页面会自动跳转到 <a href="/lizardcd-doc/docs/quickstart/task.html">任务管理</a>。</p>',28),m=[_];function h(u,b,f,g,k,x){return o(),e("div",null,m)}const P=a(n,[["render",h]]);export{q as __pageData,P as default};
