import{_ as t,D as c,c as d,j as a,a as e,I as r,a3 as l,o as i,ae as s,af as n,ag as p,ah as m,ai as _,aj as h}from"./chunks/framework.CtjmQ_hV.js";const S=JSON.parse('{"title":"虚拟机部署","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/application/vm.md","filePath":"docs/features/application/vm.md","lastUpdated":1720844699000}'),g={name:"docs/features/application/vm.md"},f={id:"虚拟机部署",tabindex:"-1"},u=a("a",{class:"header-anchor",href:"#虚拟机部署","aria-label":'Permalink to "虚拟机部署 <Badge type="warning" text="v1.3.0" />"'},"​",-1),b=l('<p>agent 以二进制启动时，如果未找到 <code>kubeconfig</code>，会自动转为虚拟机模式。本章节展示如何将应用部署于虚拟机（物理机同理）的指定路径下，并且启动，及健康检查。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>虚拟机模式的 agent 启动配置中，注册 Key 的格式必须满足 <code>lizardcd-agent.&lt;system_name&gt;.&lt;ip&gt;</code>，其中 &lt;system_name&gt; 自定义，&lt;ip&gt; 是本机 IP。</p></div><h2 id="新建应用" tabindex="-1">新建应用 <a class="header-anchor" href="#新建应用" aria-label="Permalink to &quot;新建应用&quot;">​</a></h2><p>本节以部署一个 <code>node_exporter</code> 到 <code>10.50.89.44</code> 为例。其中安装包存放于对象存储（minio）。</p><h3 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h3><ul><li>已有一个对象存储 <code>minio</code>，桶名为 <code>lizardcd</code>，安装包存放路径 <code>http://minio:9000/lizardcd/node_exporter/node_exporter-1.8.1.linux-amd64.tar.gz</code>。</li><li>平台设置里添加一个镜像仓库，类型为 <code>S3</code>，地址为 <a href="http://minio:9000" target="_blank" rel="noreferrer">http://minio:9000</a>。</li></ul><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><p>导航栏点击 <code>应用管理</code>，点击按钮 <code>新建应用</code>，按如下图所示填写：</p><p><img src="'+s+'" alt="" data-fancybox="gallery"></p><p><code>镜像仓库/制品库</code> 选择 <a href="http://minio:9000" target="_blank" rel="noreferrer">http://minio:9000</a>，<code>仓库/项目</code> 填写 lizardcd，<code>制品名</code> 填写 node_exporter</p><p><img src="'+n+'" alt="" data-fancybox="gallery"></p><p><code>部署前命令/脚本</code> 通常可执行停止服务、清理旧版本等操作，运行于下载制品之前。</p><p><code>启动命令/脚本</code> 运行于下载制品、解压之后（lizardcd 会将制品自动下载于 <code>部署路径</code>）。</p><h3 id="健康检查配置" tabindex="-1">健康检查配置 <a class="header-anchor" href="#健康检查配置" aria-label="Permalink to &quot;健康检查配置&quot;">​</a></h3><ol><li>HTTP方式</li></ol><p><img src="'+p+'" alt="" data-fancybox="gallery"></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>agent 会在虚拟机 以 <code>GET/POST</code> 访问 <code>http://localhost:9100/metrics</code> 并判断返回码是否为 <code>200OK</code>。因此服务必须启动在 <code>0.0.0.0</code>，否则将不通。</p></div><ol start="2"><li>Shell方式</li></ol><p><img src="'+m+'" alt="" data-fancybox="gallery"></p><ol start="3"><li>TCP方式</li></ol><p><img src="'+_+'" alt="" data-fancybox="gallery"></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>和 HTTP 检查一样，agent 会探测虚拟机 <code>localhost</code> 的 <code>9100</code> TCP端口。因此服务必须启动在 <code>0.0.0.0</code>，否则将不通。</p></div><h2 id="发布应用" tabindex="-1">发布应用 <a class="header-anchor" href="#发布应用" aria-label="Permalink to &quot;发布应用&quot;">​</a></h2><p>选中 <code>node_exporter</code>，<code>更多操作</code>-<code>发布</code>，选择一个版本提交。</p><p><img src="'+h+'" alt="" data-fancybox="gallery"></p>',25);function x(k,y,P,T,v,q){const o=c("Badge");return i(),d("div",null,[a("h1",f,[e("虚拟机部署 "),r(o,{type:"warning",text:"v1.3.0"}),e(),u]),b])}const I=t(g,[["render",x]]);export{S as __pageData,I as default};
