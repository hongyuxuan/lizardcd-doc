import{_ as t,D as c,c as d,j as a,a as e,I as r,a3 as s,o as i,ar as l,as as n}from"./chunks/framework.CVQlUOPj.js";const v=JSON.parse('{"title":"工作负载","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/workload.md","filePath":"docs/features/workload.md","lastUpdated":1721115716000}'),p={name:"docs/features/workload.md"},_={id:"工作负载",tabindex:"-1"},m=a("a",{class:"header-anchor",href:"#工作负载","aria-label":'Permalink to "工作负载 <Badge type="warning" text="v1.0.0" />"'},"​",-1),u=s('<p>本章节将向您展示如何在 lizardcd-ui 管理您的工作负载。</p><h2 id="工作负载列表" tabindex="-1">工作负载列表 <a class="header-anchor" href="#工作负载列表" aria-label="Permalink to &quot;工作负载列表&quot;">​</a></h2><p>在列表上方可以过滤容器 <code>集群</code>、<code>命名空间</code>，并搜索工作负载名称 <code>metadata.name</code>。如图所示：</p><p><img src="'+l+'" alt="" data-fancybox="gallery"></p><p>列表展示了工作负载的名称、状态、更新时间。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>根据 Kubernetes 的 APIServer 返回值，只有 <code>Deployment</code> 才有更新时间 <code>status.conditions.lastUpdateTime</code>。而 <code>Statefulset</code> 没有更新时间，只有创建时间 <code>metadata.creationTimestamp</code>。</p></div><p>对每一项工作负载可以执行如下操作</p><ul><li>重启。类似于调用 <code>kubectl rollout restart</code> 命令。</li><li>设置镜像：为工作负载的 <code>第一个container</code> 重新设置镜像。</li><li>设置副本：设置 <code>replicas</code>。</li><li>编辑YAML：展示工作负载的 YAML 并且可以编辑、提交。</li><li>删除：请谨慎操作。</li></ul><h2 id="工作负载详情" tabindex="-1">工作负载详情 <a class="header-anchor" href="#工作负载详情" aria-label="Permalink to &quot;工作负载详情&quot;">​</a></h2><p>点击一项工作负载的负载名称可以进入工作负载的详情页。</p><p><img src="'+n+'" alt="" data-fancybox="gallery"></p><p>详情页左边展示了工作负载的基本信息。右边展示了工作负载的副本数、<code>第一个container</code> 的 Resource、标签、注解、事件。</p><p>工作负载的 Pod 信息，包括更新时间、所在 Node 节点、Pod IP、事件查看等。</p><p>展开 Pod，将展示 Pod 下的 <code>initContainers</code> 和 <code>containers</code> 信息，包括镜像、状态、重启次数。</p>',14);function h(f,P,b,k,x,g){const o=c("Badge");return i(),d("div",null,[a("h1",_,[e("工作负载 "),r(o,{type:"warning",text:"v1.0.0"}),e(),m]),u])}const y=t(p,[["render",h]]);export{v as __pageData,y as default};
