import{_ as e,c as d,o as c,a3 as a}from"./chunks/framework.CchC5uhv.js";const z=JSON.parse('{"title":"Lizardcd介绍","description":"","frontmatter":{},"headers":[],"relativePath":"docs/introduce.md","filePath":"docs/introduce.md","lastUpdated":1720431440000}'),o={name:"docs/introduce.md"},r=a('<h1 id="lizardcd介绍" tabindex="-1">Lizardcd介绍 <a class="header-anchor" href="#lizardcd介绍" aria-label="Permalink to &quot;Lizardcd介绍&quot;">​</a></h1><h2 id="什么是lizardcd" tabindex="-1">什么是Lizardcd <a class="header-anchor" href="#什么是lizardcd" aria-label="Permalink to &quot;什么是Lizardcd&quot;">​</a></h2><p>Lizardcd 是一个轻量级的云原生应用部署和持续交付平台，在最新的版本（v1.3.0）中，我们增加了对实体机应用部署和基于 HTTP 接口对接第三方平台（如 ArgoCD、Ansible/AWX）进行应用部署的功能。</p><p>Lizardcd 以 server-agent 架构工作运行，基于gRPC通信，详细介绍参考<a href="/lizardcd-doc/docs/architecture/design.html">部署架构</a>。Lizardcd 的每个组件均可部署于容器或实体机上，但我们推荐将其以容器方式部署于 Kubernetes。我们提供了 Docker Image 和 二进制安装包。对于 Kubernetes 我们还提供了 Helm Charts 的安装包，便于用户一键快速部署。</p><p>Lizardcd 的 agent 用于对接 Kubernetes 的 APIServer，支持以 <code>deployment</code> 形式运行于 Kubernetes 集群内部 （这种方式下 agent 使用 <code>serviceaccount</code> 与 APIServer 通信），也支持以 <code>二进制</code> 形式运行于 Kubernetes 集群之外（此时需要通过 <code>kubeconfig</code> 与APIServer 通信）。</p><p>Lizardcd 的 server 与 agent 通过服务注册中心通信，我们支持 <code>etcd</code>、<code>consul</code>、<code>nacos</code> 三种注册中心，其中 <code>etcd</code> 是默认选项。</p><h2 id="lizardcd-的功能特性" tabindex="-1">Lizardcd 的功能特性 <a class="header-anchor" href="#lizardcd-的功能特性" aria-label="Permalink to &quot;Lizardcd 的功能特性&quot;">​</a></h2><ul><li>云原生应用部署，同时支持实体机以及通过HTTP接口对接第三方部署/自动化平台，理论上可支持任意提供HTTP接口的平台/系统，如 ArgoCD、Ansible/AWX</li><li>无需 <code>kubeconfig</code>、<code>ClusterRole</code>，也无需知道 APIServer 地址、证书，agent 支持 <code>InCluster</code> 模式部署，特别适合于非容器集群管理员的普通用户进行应用部署</li><li>支持多集群管理，通过统一的 <code>ui</code> 和 <code>cli</code> 集中查看、管理、操作多个集群的工作负载，并进行应用部署</li><li>agent 可以在启动时自动地注册到服务注册中心，只要网络端口可达。之后 server 会自动发现已注册并且网络端口可达的 agent，就此完成纳管过程</li><li>以应用为中心，提供完善的应用管理。无论应用部署于容器或是实体机，或是在第三方平台创建的一个部署对象，lizardcd 均支持对其进行持续交付</li><li>对于部署了服务网格（如 <code>Istio</code>）的集群，Lizardcd 支持将其接入，并结合应用管理实现灰度发布、流量控制等操作（例如基于header或权重）</li><li>支持完整的 <code>Helm Cli</code> 功能，包括 Repo 添加、删除，Release 安装、卸载、更新、历史记录，README 和 values 文件查看、编辑等</li><li>内置 <code>Prometheus Metrics</code> 指标监控，以及基于 <code>Opentelemetry</code> 和 <code>Jaeger</code> 的链路跟踪功能</li></ul><p>其它更多功能特性详见 <code>功能介绍</code></p>',9),i=[r];function t(l,n,s,u,h,_){return c(),d("div",null,i)}const m=e(o,[["render",t]]);export{z as __pageData,m as default};
