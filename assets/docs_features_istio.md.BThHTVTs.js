import{_ as o,D as i,c as s,j as a,a as e,I as d,a3 as c,o as r,ak as n}from"./chunks/framework.CVQlUOPj.js";const k=JSON.parse('{"title":"Istio 管理","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/istio.md","filePath":"docs/features/istio.md","lastUpdated":1721115716000}'),l={name:"docs/features/istio.md"},p={id:"istio-管理",tabindex:"-1"},_=a("a",{class:"header-anchor",href:"#istio-管理","aria-label":'Permalink to "Istio 管理 <Badge type="warning" text="v1.2.1" />"'},"​",-1),h=c('<p>本章节将向您展示如何在 lizardcd-ui 管理您的 Istio 资源。</p><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><p>参考 <a href="/lizardcd-doc/docs/features/platform.html">平台设置</a> 开启 <code>对接Istio</code></p><h2 id="istio-资源" tabindex="-1">Istio 资源 <a class="header-anchor" href="#istio-资源" aria-label="Permalink to &quot;Istio 资源&quot;">​</a></h2><p>Lizardcd 目前支持 Istio 的 <code>DestinationRule</code> 和 <code>VirtualService</code> 两种资源类型的管理。</p><p>当您按照 <a href="/lizardcd-doc/docs/features/application/k8s.html#灰度发布">灰度发布</a> 章节为应用开启了灰度发布策略、并创建了应用以后，Lizardcd 会自动在工作负载所在的集群创建 <code>DestinationRule</code> 和 <code>VirtualService</code> 两个 Istio 资源。打开 <code>Istio 管理</code> 页面可以查看这两种资源，如图所示：</p><p><img src="'+n+'" alt="" data-fancybox="gallery"></p><p>集群和命名空间选择好以后，会列出 Lizarcd 自动创建的资源。点击右边编辑按钮可以查看 YAML 配置，支持编辑。</p><p>您还可以直接点击 <code>创建目标规则</code> 或 <code>创建虚拟服务</code> 直接创建资源。</p><p>更多 Istio 功能接入敬请期待。</p>',10);function f(m,u,I,x,g,V){const t=i("Badge");return r(),s("div",null,[a("h1",p,[e("Istio 管理 "),d(t,{type:"warning",text:"v1.2.1"}),e(),_]),h])}const v=o(l,[["render",f]]);export{k as __pageData,v as default};
