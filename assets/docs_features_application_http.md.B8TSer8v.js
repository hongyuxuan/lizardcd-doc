import{_ as e,D as t,c as o,j as i,a as s,I as d,a3 as p,o as h,a7 as n,a8 as l,a9 as c}from"./chunks/framework.CVQlUOPj.js";const b=JSON.parse('{"title":"HTTP部署","description":"","frontmatter":{},"headers":[],"relativePath":"docs/features/application/http.md","filePath":"docs/features/application/http.md","lastUpdated":1720844699000}'),r={name:"docs/features/application/http.md"},k={id:"http部署",tabindex:"-1"},F=i("a",{class:"header-anchor",href:"#http部署","aria-label":'Permalink to "HTTP部署 <Badge type="warning" text="v1.3.0" />"'},"​",-1),g=p('<p>Lizardcd 支持在 ui 直接配置 HTTP 部署，无需编写任何一行代码，即可对目标接口发起 HTTP 调用完成部署工作。同时还根据配置的健康检查接口对目标发起调用。根据配置的 <code> 检查结束判断</code> 从返回值（返回值必须是 JSON 格式）提取 <code>JSONPATH</code>，与配置的关键词进行正则表达式匹配，判断任务是否结束。如果应用还配置了 <code>检查成功判断</code>，则从返回值中提取 <code>JSONPATH</code>，判断任务是否成功；否则接口返回 <code>200OK</code> 即认为成功。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>目前仅支持 <code>http</code>，暂不支持 <code>https</code>。HTTP 部署不依赖 agent。</p></div><h2 id="新建应用" tabindex="-1">新建应用 <a class="header-anchor" href="#新建应用" aria-label="Permalink to &quot;新建应用&quot;">​</a></h2><p>本节以调用 <code>AWX</code> 平台实现 HTTP 部署 node_exporter 为例。</p><h3 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h3><ul><li>已部署 <code>AWX</code> 平台。</li><li><code>AWX</code> 平台已创建 <code>job_template</code>，id 为 1。</li><li><code>AWX</code> 平台已创建 <code>inventory</code>，id 为 1。</li><li>已有一个对象存储 <code>minio</code>，桶名为 <code>lizardcd</code>，安装包存放路径 <code>http://minio:9000/lizardcd/node_exporter/node_exporter-1.8.1.linux-amd64.tar.gz</code>。</li></ul><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><p>导航栏点击 <code>应用管理</code>，点击按钮 <code>新建应用</code>，按如下图所示填写： <img src="'+n+'" alt="" data-fancybox="gallery"></p><p><img src="'+l+`" alt="" data-fancybox="gallery"></p><p><code>Base URL</code> 填写 <code>AWX</code> 平台的地址。</p><p><code>Http Header</code> 填写 <code>AWX</code> 的 <code>Bearer Token</code>。</p><p><code>部署Method</code> 选择 POST。</p><p><code>部署Path</code> 填写 <code>AWX</code> 的固定接口 <code>/api/v2/job_templates/1/launch/</code>，其中 1 是 <code>job_template_Id</code>。</p><p><code>提交Body</code> 固定格式如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;inventory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;extra_vars&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">deploy_dir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/opt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">app_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">node_exporter</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">artifact_url</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{{artifact_url}}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">env</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dev</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>其中 <code>extra_vars</code> 根据您 job 所需的参数填写，但 <code>artifact_url</code> 是固定格式，取值为变量 <code>artifact_url</code>，该变量在执行时会被替换为实际的制品地址。</p><p><code>部署成功判断</code> 根据 <code>AWX</code> 的 <code>launch</code> 固定返回接口格式，如调用成功返回值的 JSON 中 <code>job</code> 字段为 <code>job_id</code>；否则为 <code>null</code>，因此正则表达式写 <code>\\d+</code>。</p><p><img src="`+c+'" alt="" data-fancybox="gallery"></p><p><code>健康检查Path</code> 为 <code>AWX</code> 的固定写法，其中变量 <code>response\\$\\.job</code> 将被替换为上一步执行完后的返回值 JSON 中的 job_id。</p><p><code>检查结束判断</code> 和 <code>检查成功判断</code> 都将从返回值中提取 <code>JSONPATH</code>, 并和设置的关键词进行正则表达式匹配。</p><p><code>提取输出信息</code> 将从返回值中提取 <code>JSONPATH</code>，并显示在任务执行结果中。</p><h2 id="发布应用" tabindex="-1">发布应用 <a class="header-anchor" href="#发布应用" aria-label="Permalink to &quot;发布应用&quot;">​</a></h2><p>同虚拟机部署。</p>',23);function C(u,y,_,B,E,m){const a=t("Badge");return h(),o("div",null,[i("h1",k,[s("HTTP部署 "),d(a,{type:"warning",text:"v1.3.0"}),s(),F]),g])}const T=e(r,[["render",C]]);export{b as __pageData,T as default};
